//  Create a hash table, generate a hash key by taking a key(grapes) values as a input.
//  i.e ['grapes', 10000] here key is grapes and values is 1000.
// access the item using key (grapes).
// output:[ <23 empty items>,
//   [ [ 'grapes', 10000 ] ],
//   <15 empty items>,
//   [ [ 'apples', 9 ] ],
//   <10 empty items> ]
// here 23 and 15 are the values generated by _hash(key) fuction.
class HashTable {
    constructor(size){
      this.data = new Array(size);
      // this.data = [];
    }
  
    _hash(key) {
      let hash = 0;
      for (let i =0; i < key.length; i++){
          hash = (hash + key.charCodeAt(i) * i) % this.data.length
      }
      return hash;
    }
  
    set(key, value) {
      let address = this._hash(key);
      if (!this.data[address]) {
        this.data[address] = [];
      }
      this.data[address].push([key, value]);
      return this.data;
    }
  
    get(key){
      const address = this._hash(key);
      const currentBucket = this.data[address]
      if (currentBucket) {
        for(let i = 0; i < currentBucket.length; i++){
          if(currentBucket[i][0] === key) {
            return currentBucket[i][1]
          }
        }
      }
      return undefined;
    }
  }
  
  const myHashTable = new HashTable(50);
  myHashTable.set('grapes', 10000)
  myHashTable.get('grapes')
//   myHashTable.get(23)
  myHashTable.set('apples', 9)
//   myHashTable.get('apples')
// myHashTable.get(15)